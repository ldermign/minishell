SIGNAUX : 
// ^\ envoie le signal de sortie (SIGQUIT), qui indique classiquement à 
l'application de quitter au plus vite sans rien sauvegarder ; de nombreuses 
applications ne remplacent pas le comportement par défaut, qui consiste à 
arrêter l'application immédiatement¹. Ainsi, lorsque vous appuyez sur 
Ctrl+ 4(ou tout ce qui envoie le caractère ^\) dans catou bc, aucun des deux 
ne remplace le comportement par défaut, l'application est tuée.

// Le terminal lui-même imprime la ^\partie du message : c'est une 
représentation visuelle du caractère que vous avez tapé, et le terminal est 
en mode cuit et avec l'écho activé (les caractères sont affichés par le 
terminal dès que vous les tapez, par opposition à mode sans écho où les 
caractères ne sont envoyés qu'à l'application, qui choisit ou non de les 
afficher). La Quitpartie vient de bash : il remarque que son processus 
enfant est mort à cause d'un signal d'arrêt, et c'est sa façon de vous le 
faire savoir.

// Les shells gèrent tous les signaux courants, de sorte que si vous tapez 
^\ dans un shell, vous ne tuez pas votre session, vous obtenez simplement 
une nouvelle invite, identique à ^C.




PIPE :
https://linuxhint-com.translate.goog/pipe_system_call_c/?_x_tr_sl=en&_x_tr_tl=fr&_x_tr_hl=fr&_x_tr_pto=op,sc


REDIRECTIONS :
https://putaindecode.io/articles/maitriser-les-redirections-shell/
https://www.pierre-giraud.com/shell-bash/redirection-gestion-flux/


EXPORT : 
https://www.tutorialspoint.com/unix_commands/export.htm

Scénario 1 : Il ne peut pas y avoir d'espaces à côté du =signe (égal)
Scénario 2 : l'attribution de la valeur d'un objet ne doit pas contenir d'espaces en plus des guillemets
Scénario 3 : l'attribution de valeurs de liste ne doit pas comporter d'espaces entre les valeurs
https://stackoverflow-com.translate.goog/questions/18042369/bash-export-not-a-valid-identifier?_x_tr_sl=en&_x_tr_tl=fr&_x_tr_hl=fr&_x_tr_pto=sc




int	check_if_variable_exist(t_env_ms *minishell, char *str)
char	*get_variable(t_env_ms *minishell, char *str)









TESTS : 

 
' '
aaaaaaaaaaaa
aaaaaaaaaaaaaaaa			  fffffffffff
a a a a a a a a a a a a aa 
$PWD$PWD$PWD$PWD$PWD
$PWD$PWD$PWD$PWDD
$PWD${PWD}
$PWD$PFRE
$""
$ ""
tet t t t ytghuij	"htY"jy yruj$RPYJY   $PWD  $pijk" rt"
fhurifg3rufi """ :l;lll
echo > salut
bonjour < coucou
echo >mdr>hey>>sarace \sal"mdr"
echo <hey1<h'ey2'
echo bonjour >hey >>hey2 >>hey3
>> e
ls $HOME/Desktop
echo “$PATH”
echo "$PATH$PWD"
echo -n a '' b '' c '' d
e"ch"o bonjour
"${GYTR"
"NYR"%"$"HNTEYN"TE$NW$"
echoooo oui
ctrl \ 
ctrl D -> exit nb de fois ou error
ctrl C apres cat
echo $"FERWOP$PWD"   "" oijk
echo $"GTRE"$"GT"
echo -n
echo $?
$?
historique quand y a une erreur parsing



MARCHE PAS :
signaux dans <<   ->	seg fault
exit + sig_error



JE COMPRENDS PAS
====================================================
bash-5.0$ uijok oiuo > oui | echo oijo < oiuj  > oij 
bash: oiuj: No such file or directory
bash: uijok: command not found
====================================================
bash-5.0$ echo oiuo > oui | uio oijo < oiuj  > oij
bash: oiuj: No such file or directory




LEAKS
/*
$ cat
^\Quit (core dumped)
$ cat
$ cat
^C
$ echo iuok
iuok
$ frttg
*/


FREE
1 -> malloc
2 -> avant fill redir et fill arg
3 -> pendant fill arg avant fill redir





SIGNAUX : 
https://openclassrooms.com/forum/sujet/probleme-sur-un-recode-de-minishell-44334
https://git.42l.fr/Fabien/minishell/src/branch/master/src/signal.c
^\  ->   fait ce que ^D doit faire
^D  ->   seg fault??
^D == EOF

ctrl C  >>>>>  ok?
ctrl D  >>>>>  ok mais pas trop
ctrl \  >>>>>  nop je crois

CTRL C
ok - ctrl-C in an empty prompt should show a new line with a new prompt
ok - ctrl-C in a prompt after you wrote some stuff should show a new line with a new prompt
ok - The buffer should be clean too, press "enter" to make sure nothing from the old line is executed.
ok - ctrl-C after running a blocking command like cat without arguments or grep “something“

CTRL D
ok - ctrl-D in an empty prompt should quit minishell --> RELAUNCH!
ok - ctrl-D in a prompt after you wrote some stuff should not do anything
ok - ctrl-D after running a blocking command like cat without arguments or grep “something“

CTRL \
ok - ctrl-\ in an empty prompt should not do anything
ok - ctrl-\ in a prompt after you wrote some stuff should not do anything!
ok - ctrl-\ after running a blocking command like cat without arguments or grep “something“






$$				->>>>> pas possible?






A FAIRE
options echo									>>>>>>	ok?
echo											>>>>>>	ok?
liste a l'endroit							 	>>>>>>	ok?
$?												>>>>>>	ok?
recup redirections interpretees dans char **	>>>>>>	ok?
signal ctrl D									>>>>>>	ok?
signal ctrl \									>>>>>>	ok?
signal ctrl C quand cat							>>>>>>	ok?
leaks parsing									>>>>>>	ok?
norme moi										>>>>>>	ok?
exec here_doc									>>>>>>	ok?
recup dernier '<<'								>>>>>>	ok?
changer list en char **							>>>>>>	ok?
free here_doc									>>>>>>	ok?
redirections									>>>>>>	ok?
sig_error										>>>>>>	ok?
leaks											>>>>>>	ok?
mettre en commun								>>>>>>	ok?
norme liena






redirections -> machin< truc				>>>>>>>>	cest booooon
leak -> je trouverai jamais je pense		>>>>>>>>	en fait j ai menti j ai trouve 







$ echo ui $ jio ${i} $} 4$>oui
$ cat oui
ui $ jio {i} $}
$ echo ui $ jio ${i} $} $>oui
$ cat oui
ui $ jio {i} $}
$ echo $>oui
$ cat oui
$
$ echo 4$>oui
$ cat oui
4$
$ echo oui 4$>oui
$ cat oui
oui 4$
$ exit






A REGLER
cat < Makefile > walter					>>>>>>		voir avec liena
cat << end								>>>>>>		voir avec liena
echo hello > /dev/full					>>>>>>		je comprends pas
cd										>>>>>>		j ai pas compris
cd $HOME								>>>>>>		ca va etre complique
                          >             >>>>>>		cest boooon
|										>>>>>>		cest boooon
'										>>>>>>		cest boooon
echo ${USER }							>>>>>>		cest boooon
">"										>>>>>>		cest boooon
"<" ">"									>>>>>>		cest boooon
echo -n ouiji							>>>>>>		cest boooon
${}										>>>>>>		cest boooon
$}										>>>>>>		cest boooon
echo $>oui								>>>>>>		cest boooon
echo ui $ jio ${i} $} 4$>oui			>>>>>>		cest boooon
echo ui $ jio ${i} $} 4$> oui			>>>>>>		cest boooon
echo oui ${i} oui						>>>>>>		cets boooon
cd .. trop de fois 						>>>>>>		bah en fait ca marche maintenant





===================================================================================================================
===================================================================================================================
===================================================================================================================
===================================================================================================================

LEAKS

===================================================================================================================
===================================================================================================================


$ ls |vnsdi|echo oui
minishell: vnsdi: command not found
oui
$ vnsdi|echo oui
minishell: vnsdi: command not found
oui
$ ls|vnsdi
minishell: vnsdi: command not found
$ cd ..
$ cd ../Desktop/
$ ls
Cub3D  minish  minishell  minishell_corr_1.pdf	Philosopher  test
$ cd ..
$ cd ..
$ ls
ejahan tout ca tout ca
$ exit
==926412== 
==926412== HEAP SUMMARY:
==926412==     in use at exit: 205,181 bytes in 246 blocks
==926412==   total heap usage: 1,563 allocs, 1,317 frees, 308,840 bytes allocated
==926412== 
==926412== 29 bytes in 1 blocks are definitely lost in loss record 11 of 66
==926412==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==926412==    by 0x40D09B: ft_strdup (in /mnt/nfs/homes/ejahan/Desktop/minish/minishell)
==926412==    by 0x404CDA: new_var (uts_list_var_env_ms.c:52)
==926412==    by 0x404C7D: add_var_env_minishell (uts_list_var_env_ms.c:95)
==926412==    by 0x401854: recup_var_envs (get_env.c:72)
==926412==    by 0x4015B7: main (main.c:90)
==926412== 
==926412== 118 bytes in 3 blocks are definitely lost in loss record 24 of 66
==926412==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==926412==    by 0x40D198: ft_strjoin (in /mnt/nfs/homes/ejahan/Desktop/minish/minishell)
==926412==    by 0x4030BE: built_in_cd (built_in_pwd_cd_echo.c:54)
==926412==    by 0x402DE0: built_in (built_in.c:18)
==926412==    by 0x4013E5: command (main.c:48)
==926412==    by 0x401523: loop (main.c:73)
==926412==    by 0x401600: main (main.c:96)
==926412== 
==926412== LEAK SUMMARY:
==926412==    definitely lost: 147 bytes in 4 blocks
==926412==    indirectly lost: 0 bytes in 0 blocks
==926412==      possibly lost: 0 bytes in 0 blocks
==926412==    still reachable: 0 bytes in 0 blocks
==926412==         suppressed: 205,034 bytes in 242 blocks
==926412== 
==926412== For lists of detected and suppressed errors, rerun with: -s
==926412== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)


===================================================================================================================
===================================================================================================================


$ exit
exit
==928113== 
==928113== HEAP SUMMARY:
==928113==     in use at exit: 209,497 bytes in 347 blocks
==928113==   total heap usage: 562 allocs, 215 frees, 230,040 bytes allocated
==928113== 
==928113== 8 bytes in 1 blocks are still reachable in loss record 7 of 70
==928113==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==928113==    by 0x406F81: init_args (initialisations.c:32)
==928113==    by 0x4071E0: reverse_list (lists.c:69)
==928113==    by 0x406C6E: recup_args (parsing.c:75)
==928113==    by 0x406B49: parsing (parsing.c:19)
==928113==    by 0x4014F7: loop (main.c:70)
==928113==    by 0x401600: main (main.c:96)
==928113== 
==928113== 8 bytes in 1 blocks are still reachable in loss record 8 of 70
==928113==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==928113==    by 0x406FD1: init_here_doc (initialisations.c:43)
==928113==    by 0x40A920: reverse_list_hd (list_hd.c:66)
==928113==    by 0x40BD87: exec_here_doc (here_doc.c:105)
==928113==    by 0x4074FC: sep_and_check_args (sep_args.c:78)
==928113==    by 0x406CB9: recup_args (parsing.c:80)
==928113==    by 0x406B49: parsing (parsing.c:19)
==928113==    by 0x4014F7: loop (main.c:70)
==928113==    by 0x401600: main (main.c:96)
==928113== 
==928113== 8 bytes in 1 blocks are still reachable in loss record 9 of 70
==928113==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==928113==    by 0x40B0F4: recup_redir (recup_redir.c:118)
==928113==    by 0x406D0C: recup_args (parsing.c:86)
==928113==    by 0x406B49: parsing (parsing.c:19)
==928113==    by 0x4014F7: loop (main.c:70)
==928113==    by 0x401600: main (main.c:96)
==928113== 
==928113== 16 bytes in 1 blocks are still reachable in loss record 14 of 70
==928113==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==928113==    by 0x404CB5: new_var (uts_list_var_env_ms.c:49)
==928113==    by 0x404C26: add_var_env_minishell (uts_list_var_env_ms.c:87)
==928113==    by 0x401854: recup_var_envs (get_env.c:72)
==928113==    by 0x4015B7: main (main.c:90)
==928113== 
==928113== 33 bytes in 1 blocks are still reachable in loss record 19 of 70
==928113==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==928113==    by 0x40D09B: ft_strdup (in /mnt/nfs/homes/ejahan/Desktop/minish/minishell)
==928113==    by 0x404CDA: new_var (uts_list_var_env_ms.c:52)
==928113==    by 0x404C26: add_var_env_minishell (uts_list_var_env_ms.c:87)
==928113==    by 0x401854: recup_var_envs (get_env.c:72)
==928113==    by 0x4015B7: main (main.c:90)
==928113== 
==928113== 48 bytes in 1 blocks are still reachable in loss record 24 of 70
==928113==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==928113==    by 0x407040: insertion (lists.c:21)
==928113==    by 0x407206: reverse_list (lists.c:72)
==928113==    by 0x406C6E: recup_args (parsing.c:75)
==928113==    by 0x406B49: parsing (parsing.c:19)
==928113==    by 0x4014F7: loop (main.c:70)
==928113==    by 0x401600: main (main.c:96)
==928113== 
==928113== 976 bytes in 61 blocks are still reachable in loss record 34 of 70
==928113==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==928113==    by 0x404CB5: new_var (uts_list_var_env_ms.c:49)
==928113==    by 0x404C7D: add_var_env_minishell (uts_list_var_env_ms.c:95)
==928113==    by 0x401854: recup_var_envs (get_env.c:72)
==928113==    by 0x4015B7: main (main.c:90)
==928113== 
==928113== 3,756 bytes in 61 blocks are still reachable in loss record 45 of 70
==928113==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==928113==    by 0x40D09B: ft_strdup (in /mnt/nfs/homes/ejahan/Desktop/minish/minishell)
==928113==    by 0x404CDA: new_var (uts_list_var_env_ms.c:52)
==928113==    by 0x404C7D: add_var_env_minishell (uts_list_var_env_ms.c:95)
==928113==    by 0x401854: recup_var_envs (get_env.c:72)
==928113==    by 0x4015B7: main (main.c:90)
==928113== 
==928113== LEAK SUMMARY:
==928113==    definitely lost: 0 bytes in 0 blocks
==928113==    indirectly lost: 0 bytes in 0 blocks
==928113==      possibly lost: 0 bytes in 0 blocks
==928113==    still reachable: 4,853 bytes in 128 blocks
==928113==         suppressed: 204,644 bytes in 219 blocks
==928113== 
==928113== For lists of detected and suppressed errors, rerun with: -s
==928113== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)


===================================================================================================================
===================================================================================================================

			# @echo "\033[1;32mThis is my face ! In your FACE !\033[1;0"
			# @google-chrome /sgoinfre/photos_students/2020/ldermign.JPG 2>/dev/null










leaks exit
mauvais messages erreurs 	>>>>>>	ok
here_doc quotes				>>>>>>	ok
here_doc variables
checker codes erreurs







	// j = len_hd(line);
	// printf("j = %d\n", j);
	// while (line[i] && line[i] != ' ')
	// 	i++;
	// str = malloc(sizeof(char) * (i + 1));
	// if (str == NULL)
	// {
	// 	fprintf(stderr, "ERROR MALLOC\n");
	// 	minish->parsing.error = 1;
	// 	return (NULL);
	// }
	// str[i--] = '\0';
	// while (i >= 0)
	// {
	// 	str[i] = line[i];
	// 	i--;
	// }
	// str = malloc(sizeof(char) * (j + 1));
	// if (str == NULL)
	// {
	// 	fprintf(stderr, "ERROR MALLOC\n");
	// 	minish->parsing.error = 1;
	// 	return (NULL);
	// }

